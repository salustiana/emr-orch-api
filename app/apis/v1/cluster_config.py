from http import HTTPStatus

from app.extensions import db
from app.core.models import ClusterConfiguration

from flask import request
from flask_login import login_required
from flask_restx import Namespace, Resource, fields
from sqlalchemy.orm.exc import NoResultFound


api = Namespace(
    "Configuration CRUD", description="CRUD for Cluster Configuration Service"
)

cluster_config_model = api.model(
    "Cluster configuration",
    {
        "name": fields.String(description="Config name"),
        "version": fields.String(
            description="Config ID generated by creation datetime"
        ),
        "s3_uri": fields.String(description="Path to config in s3"),
    },
)

job_flow_config_model = api.model(
    "Job flow config",
    {
        "name": fields.String(description="Config name"),
        "version": fields.String(
            description="Config ID generated by creation datetime"
        ),
        "s3_uri": fields.String(description="Path to config in s3"),
        "job_flow_config": fields.Raw(description="Job flow config"),
    },
)


@api.route("/")
class Configuration(Resource):
    @login_required
    @api.marshal_with(cluster_config_model, code=HTTPStatus.OK)
    def post(self):

        body = request.get_json(force=True)
        cluster_configuration = ClusterConfiguration(**body)
        cluster_configuration.upload()

        db.session.add(cluster_configuration)
        db.session.commit()
        return cluster_configuration

    @api.marshal_list_with(cluster_config_model, code=HTTPStatus.OK)
    def get(self):
        """Queries the API DB for all configs and returns information about them."""

        configs = ClusterConfiguration.query.filter_by(**request.args).all()

        return configs


@api.route("/<name>")
class ConfigurationJSON(Resource):
    @login_required
    @api.marshal_with(job_flow_config_model, code=HTTPStatus.OK)
    def get(self, name: str):
        configs_query = ClusterConfiguration.query.filter_by(name=name).order_by(
            ClusterConfiguration.version.desc()
        )

        try:
            version = request.args["version"]
        except KeyError:
            version = None

        if version:
            try:
                config = configs_query.filter_by(version=version).one()
            except NoResultFound:
                api.abort(
                    HTTPStatus.NOT_FOUND,
                    f"Configuration {name} with version: {version} does not exist in the DB",
                )
        else:
            # Return the first row by sorting version in descending order.
            # Since version is year-month-day-hour-minute-second-fraction,
            # This works fine.
            config = configs_query.first()
            if not config:
                api.abort(
                    HTTPStatus.NOT_FOUND,
                    f"Configuration {name} does not exist in the DB",
                )

        config.download()
        return config
